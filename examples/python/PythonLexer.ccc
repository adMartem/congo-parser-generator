/*
 * The Python lexical grammar
 */
PARSER_PACKAGE = org.parsers.pylexer;
DEFAULT_LEXICAL_STATE = PYTHON;
ENSURE_FINAL_EOL;
TOKEN_CHAINING;
//EXTRA_TOKENS = INDENT#IndentToken, DEDENT#DedentToken;
TABS_TO_SPACES=4;


/*
 * The following code injection implements the various indent/dedent logic.
 */
INJECT LEXER_CLASS :
   import java.util.List;
   import java.util.ArrayList;
   import java.util.Iterator;
   import NODE_PACKAGE.IndentToken;
   import NODE_PACKAGE.DedentToken;
{
   private BASE_TOKEN_CLASS danglingIndentation;
   private int bracketNesting, parenthesesNesting, braceNesting;
   private List<Integer> indentationStack = initIndentationStack();
   // With this set, we use "<<<" and ">>>" as explicit DEDENT/INDENT
   boolean useExplicitIndent;
   private List<Integer> cachedIndentationStack = indentationStack;

   private static List<Integer> initIndentationStack() {
      List<Integer> result = new ArrayList<Integer>();
      result.add(1);
      return result;
   }

   private BASE_TOKEN_CLASS TOKEN_HOOK(BASE_TOKEN_CLASS tok) {
      TokenType type = tok.getType();
      int tokLen = tok.toString().length();

      if ((tokLen > 1) && (type == TokenType.LBRACE || type == TokenType.RBRACE || type == TokenType.SINGLE_QUOTE || type == TokenType.DOUBLE_QUOTE)) {
         tok.truncate(1);
         tok=tok.replaceType(TokenType.TEXT_IN_FSTRING);
      }
      else if ((tokLen > 3) && (type == TokenType.LONG_DOUBLE_QUOTE || type == TokenType.LONG_SINGLE_QUOTE)) {
         tok.truncate(3);
         tok=tok.replaceType(TokenType.TEXT_IN_FSTRING);
      }
      return tok;
   }

   private BASE_TOKEN_CLASS TOKEN_HOOK(BASE_TOKEN_CLASS tok) {
      if (tok.getType() == TokenType.COMMENT) {
         String content = tok.toString().substring(1).trim();
         if (content.equalsIgnoreCase("pywim:off")) {
            if (useExplicitIndent) setUseExplicitIndent(false);
         }
         else if (content.equalsIgnoreCase("pywim:on")) {
            if (!useExplicitIndent) setUseExplicitIndent(true);
         }
      }
      return tok;
   }

   private BASE_TOKEN_CLASS TOKEN_HOOK(BASE_TOKEN_CLASS tok) {
      boolean lineJoiningOn = bracketNesting > 0 || parenthesesNesting > 0 || braceNesting > 0 || this.lexicalState != LexicalState.PYTHON;
      TokenType type = tok.getType();
      switch (type) {
         case LBRACE : braceNesting++; break;
         case RBRACE : braceNesting--; break;
         case LPAREN : parenthesesNesting++; break;
         case RPAREN : parenthesesNesting--; break;
         case LBRACKET : bracketNesting++; break;
         case RBRACKET : bracketNesting--; break;
         case NEWLINE :  if (lineJoiningOn  || tok.startsLine()) {
                             tok.setUnparsed(true);
                         }
                         return tok;
      }
      if (danglingIndentation != null) {
         tok.preInsert(danglingIndentation);
      }
      if (lineJoiningOn || useExplicitIndent || tok.isUnparsed()
        || danglingIndentation == null && !tok.startsLine()) {
         return tok;
      }
      danglingIndentation = null;
      int beginColumn = tok.getBeginColumn();
      int indentation = indentationStack.get(indentationStack.size()-1);
      if (beginColumn > indentation) {
         indentationStack.add(beginColumn);
         return IndentToken.makeIndentToken(tok, this, indentationStack);
      }
      if (beginColumn < indentation) {
         return handleDedent(tok, beginColumn);
      }
      return tok;
   }

   private BASE_TOKEN_CLASS handleDedent(BASE_TOKEN_CLASS tok, final int offset) {
       int dedentIndex = indentationStack.indexOf(offset);
       if (dedentIndex <0) {
          BASE_TOKEN_CLASS invalidDedent = new InvalidToken(this, 0,0);
          invalidDedent.setCachedImage("Invalid Dedent");
          tok.preInsert(invalidDedent);
          return invalidDedent;
       }
       BASE_TOKEN_CLASS firstDedent = null;
       for (int i=indentationStack.size()-1; i>dedentIndex; i--) {
          int dedentAmount = indentationStack.get(i) - indentationStack.get(i-1);
          indentationStack.remove(i);
          BASE_TOKEN_CLASS dedent = DedentToken.makeDedentToken(tok, this, indentationStack, dedentAmount);
          if (firstDedent == null) firstDedent = dedent;
       }
       return firstDedent;
   }

   private void RESET_TOKEN_HOOK(BASE_TOKEN_CLASS tok) {
      braceNesting = bracketNesting = parenthesesNesting = 0;
      TokenType tokType = tok.getType();
      if (tokType == TokenType.INDENT || tokType == TokenType.DEDENT) {
         if (tok.isVirtual()) {
             danglingIndentation = tok;
             indentationStack = tok.getIndents();
         }
         return;
      }
      if (tokType == TokenType.LBRACE) braceNesting++;
      else if (tokType == TokenType.RBRACE) braceNesting--;
      else if (tokType == TokenType.LPAREN) parenthesesNesting++;
      else if (tokType == TokenType.RPAREN) parenthesesNesting--;
      else if (tokType == TokenType.LBRACKET) bracketNesting++;
      else if (tokType == TokenType.RBRACKET) bracketNesting--;
      for (Iterator<BASE_TOKEN_CLASS> toks = tok.precedingTokens(); toks.hasNext();) {
         BASE_TOKEN_CLASS previous = toks.next();
         TokenType prevType = previous.getType();
         switch (prevType) {
            case LBRACE : braceNesting++; break;
            case RBRACE : braceNesting--; break;
            case LPAREN : parenthesesNesting++; break;
            case RPAREN : parenthesesNesting--; break;
            case LBRACKET : bracketNesting++; break;
            case RBRACKET : bracketNesting--; break;
            case INDENT :
            case DEDENT : if (previous.isVirtual()) indentationStack = previous.getIndents(); 
                          return;
         }
      }
   }

   void setUseExplicitIndent(boolean useExplicitIndent) {
      this.useExplicitIndent = useExplicitIndent;
      if (useExplicitIndent) {
         activeTokenTypes.add(TokenType.INDENT);
         activeTokenTypes.add(TokenType.DEDENT);
         cachedIndentationStack = indentationStack;
      } else {
         activeTokenTypes.remove(TokenType.INDENT);
         activeTokenTypes.remove(TokenType.DEDENT);
         indentationStack = cachedIndentationStack;
      }
   }
}

INJECT BASE_TOKEN_CLASS : {
   public java.util.List<Integer> getIndents() {
      return null;
   }

   boolean startsLine() {
      for (java.util.Iterator<BASE_TOKEN_CLASS> toks = precedingTokens(); toks.hasNext();) {
         BASE_TOKEN_CLASS t = toks.next();
         TokenType type = t.getType();
         if (type==TokenType.CONTINUE_LINE) return false;
         if (type == TokenType.INDENT || type == TokenType.DEDENT) continue;
         if (!t.isUnparsed()) {
            return t.getEndLine() != this.getBeginLine();
         }
      }
      return true;
   }

   public BASE_TOKEN_CLASS getPreviousToken() {
        return previousCachedToken();
    }
}

INJECT PARSER_CLASS :
{
   public void setUseExplicitIndent(boolean useExplicitIndent) {
      token_source.setUseExplicitIndent(useExplicitIndent);
   }
}

INJECT DedentToken :
   import java.util.List;
   import java.util.ArrayList;
{
   private List<Integer> indents;
   private int dedentAmount;
   // Is this an explicit dedent marker, i.e. <<<
   private boolean isExplicit;

   public static BASE_TOKEN_CLASS makeDedentToken(BASE_TOKEN_CLASS followingToken, LEXER_CLASS tokenSource, List<Integer> indents, int dedentAmount) {
      DedentToken result = new DedentToken(TokenType.DEDENT, tokenSource, 0, 0);
      result.indents = new ArrayList<Integer>(indents.size());
      result.indents.addAll(indents);
      result.dedentAmount = dedentAmount;
      followingToken.preInsert(result);
      return result;
   }

   public List<Integer> getIndents() { 
      if (indents == null) return null;
      return new ArrayList<Integer>(indents);
   }

   public void setExplicit(boolean isExplicit) {
      this.isExplicit = isExplicit;
   }

   public boolean isVirtual() {
      return !isExplicit;
   }

/*
 *  Commented out, as interferes with representation used in tests
 *
   public String toString() {
       return "DEDENT";
   }
 */

   public int getDedentAmount() {
      return dedentAmount;
   }
}

INJECT IndentToken :
   import java.util.List;
   import java.util.ArrayList;
{
   private List<Integer> indents;
   // Is this an explicit indent marker, i.e. <<<
   private boolean isExplicit;

   public static BASE_TOKEN_CLASS makeIndentToken(BASE_TOKEN_CLASS followingToken, LEXER_CLASS tokenSource, List<Integer> indents) {
      IndentToken result = new IndentToken(TokenType.INDENT, tokenSource, 0, 0);
      result.indents = new ArrayList<Integer>(indents.size());
      result.indents.addAll(indents);
      followingToken.preInsert(result);
      return result;
   }

   public List<Integer> getIndents() {
      if (indents == null) return null;
      return new ArrayList<Integer>(indents);
   }

   public void setExplicit(boolean isExplicit) {
      this.isExplicit = isExplicit;
   }

   public boolean isVirtual() {
      return !isExplicit;
   }

/*
 *  Commented out, as interferes with representation used in tests
 *
   public String toString() {
       return "INDENT";
   }
 */

   public int getIndentAmount() {
      return indents.get(indents.size() - 1) - indents.get(indents.size() - 2);
   }
}

SKIP : <SPACE : (' ' | "\f")+>;

UNPARSED :
   <CONTINUE_LINE : "\\\n"> #Whitespace
   |
   <COMMENT: "#" (~["\n"])*> #Comment
;

TOKEN :
   <NEWLINE : (<SPACE>)? "\n"> #Newline
;

TOKEN #Delimiter :
   <ASSIGN : '='>
   |
   <AT : '@'>
   |
   <COLON : ":" >
   |
   <COMMA : ",">
   |
   <EQ : "==">
   |
   <LBRACKET : "[">
   |
   <RBRACKET : "]">
   |
   <LPAREN : "(">
   |
   <RPAREN : ")" >
   |
   <SEMICOLON : ";">
   |
   <STAR : "*">
   |
   <STAR_STAR : "**">
   |
   <MINUSASSIGN : "-=">
   |
   <PLUSASSIGN : "+=">
   |
   <STARASSIGN : "*=">
   |
   <ATASSIGN : "@=">
   |
   <SLASHASSIGN : "/=">
   |
   <REMASSIGN : "%=">
   |
   <ANDASSIGN : "&=">
   |
   <ORASSIGN : "|=">
   |
   <XORASSIGN : "^=">
   |
   <LSHIFTASSIGN : "<<=">
   |
   <RSHIFTASSIGN : ">>=">
   |
   <STARSTARASSIGN : "**=">
   |
   <SLASHSLASHASSIGN : "//=">
   |
   <INDENT : ">>>"> #IndentToken {
          ((IndentToken)matchedToken).setExplicit(true);
      }
   |
   <DEDENT : "<<<"> #DedentToken {
          ((DedentToken)matchedToken).setExplicit(true);
      }
;

TOKEN #Operator :
   <BIT_AND : "&">
   |
   <BIT_OR : "|">
   |
   <XOR : "^">
   |
   <TILDE : "~">
   |
   <COLONEQUALS : ":=">
   |
   <DOT : ".">
   |
   <ELLIPSIS : "...">
   |
   <LE: "<=" >
   |
   <GE: ">=" >
   |
   <NE: "!=" >
   |
   <GT: ">" >
   |
   <LT: "<" >
   |
   <MINUS : "-">
   |
   <PLUS : "+">
   |
   <SLASH : "/">
   |
   <SLASHSLASH : "//">
   |
   <PERCENT : "%">
   |
   <LSHIFT : "<<">
   |
   <RSHIFT : ">>">
   |
   <HOOK : "? ">
   |
   <RARROW : "->">
   |
   <EXCLAM : "!">
;

TOKEN #Keyword :
   <AND : "and">
   |
   <AS : "as">
   |
   <_ASSERT : "assert">
   |
   <ASYNC : "async">
   |
   <AWAIT : "await">
   |
   <BREAK : "break">
   |
   <CASE : "case">
   |
   <CLASS : "class">
   |
   <CONTINUE : "continue">
   |
   <DEF : "def">
   |
   <DEL : "del">
   |
   <EXCEPT : "except">
   |
   <FINALLY : "finally">
   |
   <FOR : "for">
   |
   <FROM : "from">
   |
   <GLOBAL : "global">
   |
   <IF : "if">
   |
   <IN : "in">
   |
   <IS : "is">
   |
   <ELIF : "elif">
   |
   <ELSE : "else">
   |
   <FALSE : "False">
   |
   <IMPORT : "import">
   |
   <LAMBDA : "lambda">
   |
   <MATCH : "match">
   |
   <NONLOCAL : "nonlocal">
   |
   <NONE : "None">
   |
   <NOT : "not">
   |
   <OR : "or">
   |
   <PASS : "pass">
   |
   <PEG_PARSER : "__peg_parser__">
   |
   <RAISE : "raise">
   |
   <RETURN : "return">
   |
   <TRUE : "True">
   |
   <TRY : "try">
   |
   <TYPE : "type">
   |
   <WHILE : "while">
   |
   <WITH : "with">
   |
   <YIELD : "yield">
;

TOKEN #NumericalLiteral :
    <DECNUMBER:
        ["1"-"9"] ((["_"])?["0"-"9"])* (["l", "L"])?
      | ("0")+
      >
    |
    <BADDECNUMBER: ["0"-"9"] ((["_"])?["0"-"9"])+ (["l", "L"])? >
    |
    <HEXNUMBER: "0" ["x","X"] ((["_"])? ["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
    |
    <OCTNUMBER: "0" ["o","O"] ((["_"])? ["0"-"7"])* (["l","L"])? >
    |
    <BINNUMBER: "0" (["b","B"])? ((["_"])? ["0"-"1"])* (["l","L"])? >
    |
    <FLOAT:
        ["0"-"9"]((["_"])?["0"-"9"])* "." ((["_"])?["0"-"9"])* (<EXPONENT>)?
      | "." ["0"-"9"]((["_"])?["0"-"9"])* (<EXPONENT>)?
      | ["0"-"9"]((["_"])?["0"-"9"])* <EXPONENT>
      >
    |
    <COMPLEX: (<DECNUMBER> | <FLOAT> | "0" <DECNUMBER> ) ["j", "J"]>
    |
    <#EXPONENT: ["e","E"] (["+","-"])? ["0"-"9"]((["_"])?["0"-"9"])* >
;

TOKEN #StringLiteral :
   <STRING_LITERAL : <STRING_LITERAL1> | <STRING_LITERAL2> | <STRING_LITERAL3> | <STRING_LITERAL4>
                     | <BYTES_LITERAL_1> | <BYTES_LITERAL_2> | <BYTES_LITERAL_3> | <BYTES_LITERAL_4>>
   |
   <#STRING_LITERAL1 : (<STRING_PREFIX>)? '"' ((~['"', "\\", "\n"])|<STRING_ESCAPE>)* '"'>
   |
   <#STRING_LITERAL2 : (<STRING_PREFIX>)? "'" ((~["'", "\\", "\n"])|<STRING_ESCAPE>)* "'">
   |
   <#STRING_LITERAL3 : (<STRING_PREFIX>)? "'''" (<INSIDE_SL_3>)* "'''">
   |
   <#STRING_LITERAL4 : (<STRING_PREFIX>)? '"""' (<INSIDE_SL_4>)* '"""'>
   |
   <#INSIDE_SL_3 : ("'" ("'")? )? (<STRING_ESCAPE> | (~["'"]))>
   |
   <#INSIDE_SL_4 : ('"' ('"')? )? (<STRING_ESCAPE> | (~['"']))>
   |
   <#BYTES_LITERAL_1 : <BYTES_PREFIX> "'" ((~["\n","'", "\\"])|<BYTES_ESCAPE>)* "'">
   |
   <#BYTES_LITERAL_2 : <BYTES_PREFIX> '"' ((~["\n",'"','\\'])|<BYTES_ESCAPE>)* '"'>
   |
   <#BYTES_LITERAL_3 : <BYTES_PREFIX> "'''" (<INSIDE_BL_3>)* "'''">
   |
   <#BYTES_LITERAL_4 : <BYTES_PREFIX> '"""' (<INSIDE_BL_4>)* '"""'>
   |
   <#INSIDE_BL_3 : ("'" ("'")? )? (<BYTES_ESCAPE> | (~["'"]))>
   |
   <#INSIDE_BL_4 : ('"' ('"')? )? (<BYTES_ESCAPE> | (~['"']))>
   |
   <#STRING_PREFIX : "r" | "u" | "R" | "U">
   |
   <#BYTES_PREFIX :  "b" | "B" | "br" | "Br" | "bR" | "BR" | "rb" | "rB" | "Rb" | "RB">
   |
   <#STRING_ESCAPE: "\\" ~[] >
   |
   <#BYTES_ESCAPE : "\\" ["\u0000"-"\u007F"]>
;

//INCLUDE PYTHON_IDENTIFIER_DEF
INCLUDE "PythonIdentifierDef.ccc"

TOKEN :
  <NAME : <PYTHON_IDENTIFIER_START> (<PYTHON_IDENTIFIER_PART>)* > #Name
;

TOKEN :
  <BADNAME :
    [
       "a"-"z",
       "A"-"Z",
       "_",
       "\u0080"-"\uffff"
    ]
    (
        [
           "a"-"z",
           "A"-"Z",
           "0"-"9",
           "_",
           "\u0080"-"\uffff"
        ]
    )* >
;

// <Token and lexical state definitions for F-strings

TOKEN :
    <#FSTRING_PREFIX : "f" | "F" >
    |
    <#RAW_FSTRING_PREFIX : "fr" | "Fr" | "fR" | "FR" | "rf" | "rF" | "Rf" | "RF">
    |
    <FSTRING_DOUBLE_QUOTE_START : <FSTRING_PREFIX> '"'>
    |
    <RAW_FSTRING_DOUBLE_QUOTE_START : <RAW_FSTRING_PREFIX> '"'>
    |
    <FSTRING_SINGLE_QUOTE_START : <FSTRING_PREFIX> "'">
    |
    <RAW_FSTRING_SINGLE_QUOTE_START : <RAW_FSTRING_PREFIX> "'">
    |
    <FSTRING_LONG_DOUBLE_QUOTE_START : <FSTRING_PREFIX> '"""'>
    |
    <RAW_FSTRING_LONG_DOUBLE_QUOTE_START : <RAW_FSTRING_PREFIX> '"""'>
    |
    <FSTRING_LONG_SINGLE_QUOTE_START : <FSTRING_PREFIX> "'''">
    |
    <RAW_FSTRING_LONG_SINGLE_QUOTE_START : <RAW_FSTRING_PREFIX> "'''">
;

<PYTHON,
 IN_DOUBLE_QUOTE_FSTRING,
 IN_RAW_DOUBLE_QUOTE_FSTRING,
 IN_SINGLE_QUOTE_FSTRING,
 IN_RAW_SINGLE_QUOTE_FSTRING,
 IN_LONG_DOUBLE_QUOTE_FSTRING,
 IN_RAW_LONG_DOUBLE_QUOTE_FSTRING,
 IN_LONG_SINGLE_QUOTE_FSTRING,
 IN_RAW_LONG_SINGLE_QUOTE_FSTRING,
 IN_NESTED_PLACEHOLDER> TOKEN #Delimiter:
   <LBRACE : "{" > 
   |
   <RBRACE : "}" > 
;

<IN_DOUBLE_QUOTE_FSTRING, IN_RAW_DOUBLE_QUOTE_FSTRING> TOKEN :
  < DOUBLE_QUOTE : '"' >
;

<IN_DOUBLE_QUOTE_FSTRING> TOKEN :
  < TEXT_IN_FSTRING : ((~['"',"\\","\n","\r","{","}"]) | "{{" | "}}" | <STRING_ESCAPE> | "\\N{" (["a"-"z","A"-"Z"," "])* "}")+ > #FStringText
;

<IN_RAW_DOUBLE_QUOTE_FSTRING> MORE :
  <"{{"|"}}">
  |
  < (~['"',"\n","\r","{","}"]) >
;

<IN_SINGLE_QUOTE_FSTRING, IN_RAW_SINGLE_QUOTE_FSTRING> TOKEN :
  < SINGLE_QUOTE : "'" >
;

<IN_SINGLE_QUOTE_FSTRING> TOKEN :
  < ((~["'","\\","\n","\r","{","}"]) | "{{" | "}}" | <STRING_ESCAPE> | "\\N{" (["a"-"z","A"-"Z"," "])* "}")+ > #FStringText
  {
     matchedToken.setType(TokenType.TEXT_IN_FSTRING);
  }
;

<IN_RAW_SINGLE_QUOTE_FSTRING> MORE :
  < "{{" | "}}" >
  |
  < "\\\\" | "\\'">
  |
  < (~["'","\n","\r","{","}"])>
;

<IN_LONG_DOUBLE_QUOTE_FSTRING, IN_LONG_SINGLE_QUOTE_FSTRING> MORE :
   <"\\N{" (["a"-"z","A"-"Z"," "])* "}">
   |
   <'{{' | '}}' | <STRING_ESCAPE>>
   |
   < ~[]>
;

<IN_RAW_LONG_DOUBLE_QUOTE_FSTRING, IN_RAW_LONG_SINGLE_QUOTE_FSTRING>
MORE :
   <'{{' | '}}'>
   |
   < ~[]>
;

<IN_LONG_DOUBLE_QUOTE_FSTRING, IN_RAW_LONG_DOUBLE_QUOTE_FSTRING> TOKEN :
  < LONG_DOUBLE_QUOTE : '"""' >
;

<IN_LONG_SINGLE_QUOTE_FSTRING, IN_RAW_LONG_SINGLE_QUOTE_FSTRING> TOKEN :
  < LONG_SINGLE_QUOTE : "'''" >
;

<IN_NESTED_PLACEHOLDER> TOKEN :
  <((~["'","\\","\n","\r","{","}"]) | <STRING_ESCAPE>)+ > {
     matchedToken.setType(TokenType.TEXT_IN_FSTRING);
  }
;
